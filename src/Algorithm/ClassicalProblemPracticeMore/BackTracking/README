一般有两个类型：

1.判断是不是或者给出一种解决途径: word pattern II, sudu II
   (1)范例：
        for() {
            if(dfs()) {
                return true;
            }
         }
         return false;
2.输出所有的可能: word break II, letter combination
 (1) 可以用map<sub problem, result> 来记录搞过的东西，比如说abcd, 可以记录d, cd, bcd, abcd的结果
 (2) 范例:
        private List<String> dfs(String digits, int idx) {
            if(digits.equals("")) {
                return Arrays.asList("");
            }
            if(map.containsKey(digits)) {
                return map.get(digits);
            }
            List<String> res = new ArrayList<>();
            String set = mapping[(digits.charAt(0) - '0')];
            for(int i = 0; i < set.length(); i++) {
                List<String> nextRes = dfs(digits.substring(1, digits.length()));
                for(String s : nextRes) {
                    res.add(set.charAt(i) + s);
                }
            }
            map.put(digits, res);
            return res;
        }
