package Assignment4;
// Name: Fan Zhang
// USC NetID: 1417685115
// CS 455 PA4
// Fall 2017
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class AnagramFactory {
      private int [] mult;
      private String unique = "";
      public AnagramFactory(String s) {
          convertToAnagram(s);
//          System.out.println(Arrays.toString(mult));
//          System.out.println(unique);
      }
//        public static void main(String [] args) {
//            AnagramFactory sol = new AnagramFactory("EEIIAAAAII");
//
//        }


    /**
     * convert a string to its unique string and frequency array
     * @param s: original string
     */
      private void convertToAnagram(String s) {
          char [] array = s.toCharArray();
         Arrays.sort (array);//sort the char array;
         int count = 0;
         List<Integer> frq = new ArrayList<>();
         int left = 0;
         // left : all the elements (not include left) before array[left] are unique characters
         for (int i = 0; i < array.length; i++) {
            ++ count;
            if(i == array.length - 1 || array[i] != array[i + 1]) {
               array[left++] = array[i];
               frq.add(count);
               count = 0;
            }

         }
         mult = toArray(frq);
         unique = new String(array, 0, left);
      }

    /**
     * This method is changed ArrayList array
     * @param list: arraylist of frequency
     * @return array of the frequency
     */
      private int [] toArray(List<Integer> list) {
         int [] array = new int[list.size()];
         for(int i = 0; i < list.size(); i ++) {
            array[i] = list.get(i);
         }
         return array;
      }

    /**
     * This method is used to get frq of each character
     * @return the frequency of each character
     */
    public int[] getMult() {
        return mult;
    }

    /**
     * This method is used to get the unique String
     * @return unique string
     */

    public String getUnique() {
        return unique;
    }

    /**
     * This is automatically generated by intellJ
     * This medhos is used to override equals
     * @param o: other object
     * @return if this object is equals to the other object: o
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        AnagramFactory that = (AnagramFactory) o;

        if (!Arrays.equals(mult, that.mult)) return false;
        return unique != null ? unique.equals(that.unique) : that.unique == null;
    }

    /**
     * This is automatically generated by intellJ
     * This method is used to override hashcode
     * @return  the hashcode of this object
     */
    @Override
    public int hashCode() {
        int result = Arrays.hashCode(mult);
        result = 31 * result + (unique != null ? unique.hashCode() : 0);
        return result;
    }
}